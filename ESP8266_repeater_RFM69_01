// Vers.01 ---> to be test
// Add retrasmission to Hooly Repeater. NB REPEATERADDR = 3 to be defined to repeater hardware



// * nRF24L01+  ESP8266  RFM69HW
// * VCC        VCC       VCC
// * CE         GPIO5*    DIO0
// * CSN/CS     GPIO15**  NSS
// * SCK        GPIO14    SCK
// * MISO       GPIO12    MISO
// * MOSI       GPIO13    MOSI
// * GND        GND       GND

// * attenzione alla libreria, mettere in RFM69.h:
// #define RF69_IRQ_PIN          5
// #define RF69_IRQ_NUM          5
// ** usare radio.setCS(15); nello sketch

// vedi http://thebillplease.net/play/esp8266-with-rfm69-using-lowpowerlab/

// usare NODE MCU (ESP-12E) come tipo di arduino
// oppure "Generic ESP8266 Module"


#include <RFM69.h>
#include <SPI.h>

// Transceiver configuration
#define NETWORKID          0   // Must be the same for all nodes
#define MYNODEID           3   // My node ID as repeater
#define HOOLYID            2   // Hooly id
#define ROUTERID           1   // Destination node ID (router)

#define FREQUENCY  RF69_433MHZ // transceiver frequency

#define LED 4                  // pin for led

// Remote site information
const char http_site[] = "myhooly.hooly.eu";
const int http_port = 80;

// global variables
unsigned long timeout;
bool retransmit = 0;
bool waiting_router = 0;

char waitingPayload[32] = "";
char receivedPayload[32] = "";

// Initialize RFM69 library
RFM69 radio;

// --------------------------------
// setup routine, run once
void setup() {

  // Open a serial port so we can send keystrokes to the module:
  Serial.begin(115200);
  Serial.print("Node ");
  Serial.print(MYNODEID,DEC);
  Serial.println(" ready");

  pinMode(LED, OUTPUT);

  // transceiver library initialize
  radio.setCS(15);
  radio.initialize(FREQUENCY, MYNODEID, NETWORKID);
  radio.setHighPower();
  radio.promiscuous(1);
}

// end setup
// --------------------------------
// main program

void loop() {

  if ((millis() - timeout > 500) && (retransmit == 1)) {
    digitalWrite(LED, HIGH);
    Serial.print("Timeout and retransmit data: ");
    Serial.println(waitingPayload);
    radio.send(ROUTERID, waitingPayload, 32);
    retransmit = 0;
    Serial.println();  // Done retransmit
    for (byte i = 0; i < strlen(waitingPayload); i++) waitingPayload[i] = 0;
    digitalWrite(LED, LOW);
  }

  if (radio.receiveDone()) {
    digitalWrite(LED, HIGH);
    byte senderID = radio.SENDERID;
    int signal_strenght = (100+(((radio.RSSI)+28)*100/72));
    int separator_count = 0;
    bool bad_datagram = 0;

    Serial.print("received from node ");
    Serial.print(senderID, DEC);
    Serial.print(", message [");

    for (byte i = 0; i < radio.DATALEN; i++) {
      Serial.print((char)radio.DATA[i]);
      receivedPayload[i] = radio.DATA[i];
      if (radio.DATA[i] == ':') separator_count ++;
      if ((radio.DATA[i] < 43 && radio.DATA[i] != 0) || radio.DATA[i] > 58) {
        bad_datagram = 1;
      }
    }

    Serial.print("] - RSSI: "); Serial.println(signal_strenght);
    Serial.print("Separator count = "); Serial.print(separator_count);
    Serial.print(" - Bad datagram = "); Serial.print(bad_datagram);
    Serial.print(" - Radio data length = "); Serial.println(radio.DATALEN);
    digitalWrite(LED, LOW);

    if (separator_count == 6 && bad_datagram == 0 && radio.DATALEN == 32)
    {
      Serial.println("Data Payload OK, processing ...");

      // ----------------------

      if (senderID == HOOLYID) // Hooly message
      {
        digitalWrite(LED, HIGH);
        Serial.println("Got datagram from Hooly, waiting for the router echo");

        for (byte i = 0; i < radio.DATALEN; i++) {
          waitingPayload[i] = receivedPayload[i];
        }
        timeout = millis();
        waiting_router = 1;
        retransmit = 1;
        digitalWrite(LED, LOW);
      }

      // ----------------------

      if (senderID == ROUTERID && waiting_router == 1) // Router message I looking for
      {
        digitalWrite(LED, HIGH);
        Serial.println("Got datagram from router, checking ...");

        int error = 0;
        for (byte i = 0; i < 30; i++) {
          if (waitingPayload[i] != receivedPayload[i]) error = 1;
        }
        if (!error) {
          Serial.println("Datagram from router is the waiting echo, so do not retransmit");
          Serial.println();  // Done check acknnowledgment from router
          retransmit = 0;
        } else {
          Serial.println("Datagram from router was NOT waiting echo, so await 3 sec and retransmit");
          delay(3000);
          retransmit = 1;
        }
        waiting_router = 0;
        digitalWrite(LED, LOW);
      }

      // ----------------------

    }
  }
}
